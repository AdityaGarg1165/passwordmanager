# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import json
from PyQt5 import QtCore, QtGui, QtWidgets
from pymongo import MongoClient

client = MongoClient("mongodb+srv://aditya:Aadi_747392@cluster0.23zaf.mongodb.net/Cluster0?retryWrites=true&w=majority")
filter={}

# win = "Ui_MainWindow()"



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(479, 441)
        MainWindow.setStyleSheet("background-color:white;border-radius:4px;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.check = QtWidgets.QCheckBox(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(160, 280, 141, 41))
        self.check.setGeometry(QtCore.QRect(120, 230, 111, 17))
        self.pushButton.setStyleSheet("border:0px solid black;background-color:rgb(67, 67, 255);\n"
"border-radius:3px;color:white;font-size:20px;")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.find)
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(100, 40, 256, 311))
        self.graphicsView.setStyleSheet("background-color:rgb(241, 240, 241);border-radius:2px;")
        self.graphicsView.setObjectName("graphicsView")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(120, 160, 221, 31))
        self.lineEdit.setStyleSheet("border:1px solid black;")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(120, 190, 221, 31))
        self.lineEdit_2.setStyleSheet("border:0.5px solid black;")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(180, 70, 151, 91))
        self.label.setStyleSheet("background-color:transparent;")
        self.check.setStyleSheet("background-color:transparent;")
        self.check.setText("Remeber Me")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("img.png"))
        self.label.setObjectName("label")
        self.graphicsView.raise_()
        self.pushButton.raise_()
        self.lineEdit.raise_()
        self.lineEdit_2.raise_()
        self.label.raise_()
        self.check.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Login"))


    def remember(self):
        try:
            # inp1_1 = self.lineEdit.text()
            # inp2_1 = self.lineEdit_2.text()

            with open('data.json','r')as r:
                data = json.load(r)
                db = client[data['title'] + "db"]
                collection = db["schema"]
                
                
                result = collection.find_one({"title":data['title']})
                try:
                    if result['pass'] == data['pass']:
                        import home
                    
                except:
                    pass
        except Exception as e:
            if e == FileNotFoundError:
                print("remember was not turned on")


    def find(self):
        global db_h
        inp1 = self.lineEdit.text()
        inp2 = self.lineEdit_2.text()
        db = client[inp1 + "db"]
        collection = db["schema"]

        db_h = inp1 + "db2" 
        result = collection.find_one({"title":inp1},{"_id":0})
        try:
            # print(inp2)
            
            
            if inp2 ==  result['pass']:
                # print("sdx")
                if self.check.isChecked():
                    with open("data.json","w") as f:
                        json.dump(result,f)
                
                db = {
                    "db":inp1 + "db2",
                    "user":inp1,
                    "pass":inp2,
                    "db_v":inp1 + "db"

                }
                with open("db.json","w") as r:
                    json.dump(db,r)
                import home 
                
                
                
            else:
                self.lineEdit.setText("Username or password is wrong")
                self.lineEdit_2.setText("")
                
            # if inp2 == list(result)[2]:
            #     print("nm,")
        except:
            self.lineEdit.setText("Username or password is wrong")
            self.lineEdit_2.setText("")



            
            


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.remember()
    sys.exit(app.exec_())