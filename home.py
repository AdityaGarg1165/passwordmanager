# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'home.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from pymongo import MongoClient
import json


client = MongoClient("mongodb+srv://aditya:Aadi_747392@cluster0.23zaf.mongodb.net/Cluster0?retryWrites=true&w=majority")

db = client["as"]
collection = db['schema']


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(442, 600)
        MainWindow.setStyleSheet("background-color:white;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(34, 442, 91, 41))
        self.pushButton.setStyleSheet("border-radius:3px;background-color:rgb(67, 67, 255);font-size:20px;color:white;")
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(30, 500, 113, 20))
        self.lineEdit.setObjectName("lineEdit")
        # self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        # self.lineEdit_2.setGeometry(QtCore.QRect(30, 540, 113, 20))
        # self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(290, 490, 113, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(290, 530, 113, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        # self.lineEdit.placeholderText("account name")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(170, 440, 91, 41))
        self.pushButton_4.setStyleSheet("border-radius:3px;background-color:rgb(67, 67, 255);font-size:20px;color:white;")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(310, 440, 91, 41))
        self.pushButton_2.setStyleSheet("border-radius:3px;background-color:rgb(67, 67, 255);font-size:20px;color:white;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(60, 30, 301, 16))
        self.label.setStyleSheet("font-size:20px;background-color:transparent;")
        self.label.setObjectName("label")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(40, 80, 371, 301))
        self.listWidget.setObjectName("listWidget")
        self.pushButton_2.clicked.connect(self.add)
        self.pushButton_4.clicked.connect(self.update)
        self.pushButton.clicked.connect(self.remove)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "remove"))
        self.pushButton_4.setText(_translate("MainWindow", "update"))
        self.pushButton_2.setText(_translate("MainWindow", "add"))
        self.label.setText(_translate("MainWindow", "List of Password"))

    def update(self):
        try:
            with open("db.json","r") as d:
                db_n = json.load(d)
                v_db = client[db_n['db_v']]
                v_coll = v_db['schema']
                v_find = v_coll.find_one({"title":db_n['user']})
                if db_n['pass'] == v_find['pass']:
                    db = client[db_n['db']]
                    collection = db['schema']
                    self.listWidget.clear()
                    items = collection.find()
                    for item in items:
                        self.listWidget.addItem(item['email']+ ":" + item['pass'])
                else:
                    sys.exit()

        except Exception as e:
            if e == FileNotFoundError:
               print("database does not exists") 
        

    def remove(self):
        with open("db.json","r") as r:
            dat = json.load(r)
            db = client[dat['db']]
            collection = db['schema']
            collection.delete_one({"email":self.lineEdit.text()})
            self.update()



    def add(self):
        try:
            with open("db.json","r") as r:
                db_n = json.load(r)
                db = client[db_n['db']]
                collection = db['schema']
                item1 = self.lineEdit_3.text()
                item2 = self.lineEdit_4.text()
                find  = collection.find_one({"email":item1})
                if find == None:
                    data = {
                        "email":item1,
                        "pass":item2
                    }
                    collection.insert_one(data)
                    self.lineEdit_3.setText("")
                    self.lineEdit_4.setText("")
                    self.update()
                    
                else:
                    self.lineEdit_3.setText("You cannot set two same accounts")

        except Exception as e:
            print('Daatbase does not exist')
            

    
# if __name__ == "__main__":
import sys
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
ui.update()
MainWindow.show()
sys.exit(app.exec_())
